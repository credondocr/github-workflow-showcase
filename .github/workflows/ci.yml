name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Linting
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧹 Verify dependencies
        run: go mod verify

      - name: 🔧 Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: 🎨 Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "::error::The following files are not properly formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to fix formatting issues."
            exit 1
          fi

      - name: 🔍 Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m



  # Build Verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        os: [macos-latest]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐹 Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -v ./...

      - name: 🏗️ Build main executable
        run: go build -o github-workflow-showcase ./main.go

  # Testing
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧪 Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: 📊 Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  # Ginkgo Tests (BDD)
  ginkgo-tests:
    name: 🧪 Ginkgo BDD Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: 🧪 Run Ginkgo tests
        run: ginkgo -r -v --race --randomize-all --randomize-suites --fail-on-pending --cover --coverprofile=ginkgo-coverage.out

      - name: 📊 Upload Ginkgo coverage
        uses: actions/upload-artifact@v4
        with:
          name: ginkgo-coverage
          path: ginkgo-coverage.out



  # Notification on Success
  notify-success:
    name: ✅ Success Notification
    runs-on: ubuntu-latest
    needs: [lint, build, test, ginkgo-tests]
    if: success()
    steps:
      - name: 🎉 All checks passed
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Code quality check: PASSED"
          echo "✅ Build verification: PASSED"
          echo "✅ Unit tests: PASSED"
          echo "✅ Ginkgo BDD tests: PASSED"
