name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Linting
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧹 Verify dependencies
        run: go mod verify

      - name: 🔧 Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: 🎨 Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "::error::The following files are not properly formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to fix formatting issues."
            exit 1
          fi

      - name: 🔍 Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: 🛡️ Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: 📊 Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # Build Verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -v ./...

      - name: 🏗️ Build main executable
        run: go build -o github-workflow-showcase ./main.go

  # Testing
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧪 Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: 📊 Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  # Ginkgo Tests (BDD)
  ginkgo-tests:
    name: 🧪 Ginkgo BDD Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: 🧪 Run Ginkgo tests
        run: ginkgo -r -v --race --randomize-all --randomize-suites --fail-on-pending --cover --coverprofile=ginkgo-coverage.out

      - name: 📊 Upload Ginkgo coverage
        uses: actions/upload-artifact@v3
        with:
          name: ginkgo-coverage
          path: ginkgo-coverage.out

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🏗️ Build application
        run: go build -o github-workflow-showcase ./main.go

      - name: 🚀 Start application in background
        run: |
          ./github-workflow-showcase &
          echo $! > app.pid
          sleep 5

      - name: 🧪 Test health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status: $response"
            exit 1
          fi
          echo "Health check passed!"

      - name: 🧪 Test API endpoints
        run: |
          # Test root endpoint
          curl -f http://localhost:8080/ > /dev/null
          
          # Test users endpoint
          curl -f http://localhost:8080/api/v1/users > /dev/null
          
          # Test creating a user
          curl -f -X POST http://localhost:8080/api/v1/users \
            -H "Content-Type: application/json" \
            -d '{"name":"Test User","email":"test@example.com","age":25}' > /dev/null
          
          echo "All API endpoints working!"

      - name: 🛑 Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

  # Dependency Check
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: 🔍 Check for known vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: 📊 Generate dependency report
        run: |
          echo "# Dependency Report" > dependency-report.md
          echo "## Direct Dependencies" >> dependency-report.md
          go list -m -f '{{.Path}} {{.Version}}' all | grep -v "github.com/credondocr/github-workflow-showcase" >> dependency-report.md

      - name: 📤 Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.md

  # Notification on Success
  notify-success:
    name: ✅ Success Notification
    runs-on: ubuntu-latest
    needs: [lint, security, build, test, ginkgo-tests, integration-tests, dependency-check]
    if: success()
    steps:
      - name: 🎉 All checks passed
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Code quality check: PASSED"
          echo "✅ Security scan: PASSED" 
          echo "✅ Build verification: PASSED"
          echo "✅ Unit tests: PASSED"
          echo "✅ Ginkgo BDD tests: PASSED"
          echo "✅ Integration tests: PASSED"
          echo "✅ Dependency check: PASSED"
