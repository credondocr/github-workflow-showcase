name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

# Ensure only one workflow runs at a time for the same PR
concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# Required permissions for this workflow
permissions:
  contents: read          # To read the repository content
  pull-requests: write    # To comment on PRs
  issues: write          # To create/update issue comments
  checks: write          # To create check runs
  actions: read          # To read workflow results

jobs:
  # Quick validation for draft PRs
  quick-check:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Remove "needs review" label if PR updated
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'needs review'
              });
              console.log('✅ Removed "needs review" label - PR has new changes');
            } catch (error) {
              if (error.status === 404) {
                console.log('ℹ️ "needs review" label was not present');
              } else {
                console.log('⚠️ Error removing label:', error.message);
              }
            }

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Verify go mod tidy
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "❌ go.mod or go.sum is not tidy. Please run 'go mod tidy' and commit the changes."
            exit 1
          fi

      - name: 🏗️ Quick build check
        run: go build -v ./...

  # Essential checks that must pass
  essential-checks:
    name: ✅ Essential Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: quick-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🎨 Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted. Files that need formatting:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to fix formatting issues."
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: 🔍 Basic linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=3m --fast

      - name: 🧪 Run tests
        run: |
          echo "🧪 Running unit tests..."
          go test -v -race ./...
          echo "✅ All tests passed"

      - name: 🧪 Run Ginkgo tests
        run: |
          echo "🧪 Running Ginkgo BDD tests..."
          go test -v ./tests/
          echo "✅ All Ginkgo tests passed"

  # PR size and complexity check
  pr-analysis:
    name: 📊 PR Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Analyze PR size
        run: |
          # Get the base branch
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          # Count changes
          LINES_ADDED=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum+=$1} END {print sum+0}')
          LINES_DELETED=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum+=$2} END {print sum+0}')
          FILES_CHANGED=$(git diff --name-only $BASE_SHA..$HEAD_SHA | wc -l)
          
          echo "📊 PR Analysis Results:"
          echo "📁 Files changed: $FILES_CHANGED"
          echo "➕ Lines added: $LINES_ADDED"
          echo "➖ Lines deleted: $LINES_DELETED"
          echo "📏 Net change: $((LINES_ADDED - LINES_DELETED))"
          
          # Size classification
          TOTAL_CHANGES=$((LINES_ADDED + LINES_DELETED))
          if [ $TOTAL_CHANGES -lt 50 ]; then
            echo "📦 PR Size: XS (< 50 lines) ✅"
          elif [ $TOTAL_CHANGES -lt 200 ]; then
            echo "📦 PR Size: Small (< 200 lines) ✅"
          elif [ $TOTAL_CHANGES -lt 500 ]; then
            echo "📦 PR Size: Medium (< 500 lines) ⚠️"
            echo "💡 Consider breaking this into smaller PRs if possible"
          elif [ $TOTAL_CHANGES -lt 10000 ]; then
            echo "📦 PR Size: Large (< 10000 lines) ⚠️"
            echo "⚠️ Large PRs are harder to review. Consider breaking into smaller pieces."
          else
            echo "📦 PR Size: XL (>= 10000 lines) ❌"
            echo "❌ This PR is very large and should be broken down into smaller PRs"
            exit 1
          fi

      - name: 🔍 Check for test files
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          # Check if any Go files were added/modified
          GO_FILES_CHANGED=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '\.go$' | grep -v '_test\.go$' | wc -l)
          TEST_FILES_CHANGED=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '_test\.go$' | wc -l)
          
          echo "📁 Go files changed: $GO_FILES_CHANGED"
          echo "🧪 Test files changed: $TEST_FILES_CHANGED"
          
          if [ $GO_FILES_CHANGED -gt 0 ] && [ $TEST_FILES_CHANGED -eq 0 ]; then
            echo "⚠️ Warning: Go code was modified but no test files were updated"
            echo "💡 Consider adding or updating tests for your changes"
          else
            echo "✅ Good! Test files are included in this PR"
          fi



  # Check for breaking changes
  breaking-changes:
    name: 💥 Breaking Changes Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check for potential breaking changes
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          echo "🔍 Checking for potential breaking changes..."
          
          # Check for deleted exported functions/types
          DELETED_EXPORTS=$(git diff $BASE_SHA..$HEAD_SHA | grep "^-" | grep -E "^-func [A-Z]|^-type [A-Z]|^-var [A-Z]|^-const [A-Z]" | wc -l)
          
          # Check for modified function signatures
          MODIFIED_SIGNATURES=$(git diff $BASE_SHA..$HEAD_SHA | grep -E "^[-+]func [A-Z]" | wc -l)
          
          if [ $DELETED_EXPORTS -gt 0 ]; then
            echo "⚠️ Warning: $DELETED_EXPORTS exported items may have been deleted"
            echo "💡 This could be a breaking change. Please verify backwards compatibility."
          fi
          
          if [ $MODIFIED_SIGNATURES -gt 0 ]; then
            echo "⚠️ Warning: $MODIFIED_SIGNATURES function signatures may have been modified"
            echo "💡 Please ensure these changes are backwards compatible."
          fi
          
          if [ $DELETED_EXPORTS -eq 0 ] && [ $MODIFIED_SIGNATURES -eq 0 ]; then
            echo "✅ No obvious breaking changes detected"
          fi

  # Final status check
  pr-ready:
    name: 🎯 PR Ready for Review
    runs-on: ubuntu-latest
    needs: [essential-checks, pr-analysis, breaking-changes]
    if: success() && github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Get PR statistics
        id: pr-stats
        run: |
          # Get PR information
          FILES_CHANGED=$(git diff --name-only HEAD~1 | wc -l)
          LINES_ADDED=$(git diff --numstat HEAD~1 | awk '{sum+=$1} END {print sum+0}')
          LINES_DELETED=$(git diff --numstat HEAD~1 | awk '{sum+=$2} END {print sum+0}')
          
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT

      - name: 🏷️ Add "needs review" label
        uses: actions/github-script@v7
        with:
          script: |
            // Add the "needs review" label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['needs review']
            });
            console.log('✅ Added "needs review" label');

      - name: 🚀 Comment PR ready for review
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Get PR stats
            const filesChanged = '${{ steps.pr-stats.outputs.files_changed }}';
            const linesAdded = '${{ steps.pr-stats.outputs.lines_added }}';
            const linesDeleted = '${{ steps.pr-stats.outputs.lines_deleted }}';
            
            const comment = `## 🎉 PR Ready for Review!
            
            Hey team! 👋 This PR has passed all automated checks and is ready for human review.
            
            ### ✅ All Checks Passed
            
            - ✅ **Code Quality** - Linting and formatting checks passed
            - ✅ **Tests** - All unit and integration tests passed  
            - ✅ **Security** - Security scan completed successfully
            - ✅ **Analysis** - PR size and complexity analysis completed
            - ✅ **Breaking Changes** - No breaking changes detected
            
            ### 📊 PR Summary
            
            **👤 Author:** @${prAuthor}  
            **📝 Title:** ${prTitle}  
            **📁 Files:** ${filesChanged} changed  
            **➕ Added:** ${linesAdded} lines  
            **➖ Removed:** ${linesDeleted} lines  
            
            ### 👥 Next Steps
            
            1. **Reviewers:** Please review this PR when you have time
            2. **Author:** Your PR is ready - no further action needed until feedback
            3. **Maintainers:** This PR can be merged once approved
            
            ### 🔍 Review Checklist
            
            - [ ] Code follows project conventions
            - [ ] Changes are well documented
            - [ ] No unnecessary complexity introduced
            - [ ] Edge cases are handled appropriately
            - [ ] Performance implications considered
            
            ---
            <sub>🤖 Automated review request • All checks passed at $(date +'%Y-%m-%d %H:%M UTC') • [View full report](${runUrl})</sub>`;
            
            // Check for existing "ready for review" comment to avoid duplicates
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.find(c => 
              c.user.type === 'Bot' && 
              c.body.includes('🎉 PR Ready for Review!')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('✅ Updated existing ready-for-review comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('✅ Created new ready-for-review comment');
            }

      - name: 🎉 Success summary
        run: |
          echo "🎉 All PR checks passed successfully!"
          echo "✅ Code quality: PASSED"
          echo "✅ Tests: PASSED"
          echo "✅ Security: PASSED"
          echo "✅ Analysis: PASSED"
          echo ""
          echo "🏷️ Added 'needs review' label"
          echo "💬 Posted ready-for-review comment"
          echo "🚀 This PR is ready for human review!"

  # Comment on PR with comprehensive results
  comment-results:
    name: 💬 Comment Detailed Results
    runs-on: ubuntu-latest
    needs: [essential-checks, pr-analysis, breaking-changes]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Gather PR statistics
        id: pr-stats
        run: |
          # Get PR information
          FILES_CHANGED=$(git diff --name-only HEAD~1 | wc -l)
          LINES_ADDED=$(git diff --numstat HEAD~1 | awk '{sum+=$1} END {print sum+0}')
          LINES_DELETED=$(git diff --numstat HEAD~1 | awk '{sum+=$2} END {print sum+0}')
          
          # Determine size category
          TOTAL_CHANGES=$((LINES_ADDED + LINES_DELETED))
          if [ $TOTAL_CHANGES -le 50 ]; then
            SIZE="XS"
            SIZE_EMOJI="🔹"
          elif [ $TOTAL_CHANGES -le 200 ]; then
            SIZE="S"
            SIZE_EMOJI="🔸"
          elif [ $TOTAL_CHANGES -le 500 ]; then
            SIZE="M"
            SIZE_EMOJI="🔶"
          elif [ $TOTAL_CHANGES -le 1000 ]; then
            SIZE="L"
            SIZE_EMOJI="🔺"
          else
            SIZE="XL"
            SIZE_EMOJI="🔴"
          fi
          
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "size_emoji=$SIZE_EMOJI" >> $GITHUB_OUTPUT

      - name: 💬 Create/Update PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const runId = context.runId;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            
            // Get job results
            const essentialChecks = '${{ needs.essential-checks.result }}';
            const prAnalysis = '${{ needs.pr-analysis.result }}';
            const breakingChanges = '${{ needs.breaking-changes.result }}';
            
            // PR stats from previous step
            const filesChanged = '${{ steps.pr-stats.outputs.files_changed }}';
            const linesAdded = '${{ steps.pr-stats.outputs.lines_added }}';
            const linesDeleted = '${{ steps.pr-stats.outputs.lines_deleted }}';
            const prSize = '${{ steps.pr-stats.outputs.size }}';
            const sizeEmoji = '${{ steps.pr-stats.outputs.size_emoji }}';
            
            // Determine overall status
            const allPassed = [essentialChecks, prAnalysis, breakingChanges].every(result => 
              result === 'success'
            );
            
            // Create status indicators
            const statusIcon = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };
            
            // Build the comment
            const timestamp = new Date().toLocaleString('en-US', {
              timeZone: 'UTC',
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
            
            let commentBody = `## ${allPassed ? '🎉' : '⚠️'} PR Checks Results
            
            ${allPassed ? 
              '**✨ All checks passed!** This PR is ready for review.' : 
              '**Some checks need attention.** Please review the details below.'
            }
            
            ### 📋 Check Summary
            
            | Check | Status | Details |
            |-------|--------|---------|
            | **Code Quality & Tests** | ${statusIcon(essentialChecks)} ${essentialChecks} | Linting, formatting, unit tests |
            | **PR Analysis** | ${statusIcon(prAnalysis)} ${prAnalysis} | Size, complexity, security scan |
            | **Breaking Changes** | ${statusIcon(breakingChanges)} ${breakingChanges} | API compatibility check |
            
            ### 📊 PR Statistics
            
            ${sizeEmoji} **Size: ${prSize}** | 📁 **${filesChanged} files** | ➕ **${linesAdded} additions** | ➖ **${linesDeleted} deletions**
            
            `;
            
            // Add specific recommendations based on results
            if (!allPassed) {
              commentBody += `### 🔧 Action Required
            
            `;
              
              if (essentialChecks === 'failure') {
                commentBody += `- **Code Quality Issues**: Check linting errors, test failures, or formatting issues
            `;
              }
              
              if (prAnalysis === 'failure') {
                commentBody += `- **PR Analysis Issues**: Review security scan results or complexity warnings
            `;
              }
              
              if (breakingChanges === 'failure') {
                commentBody += `- **Breaking Changes**: This PR introduces potential breaking changes - please review carefully
            `;
              }
              
              commentBody += `
            📖 **[View detailed logs](${runUrl})** for more information.
            `;
            } else {
              commentBody += `### 🚀 Ready for Review
            
            All automated checks have passed! This PR is ready for human review.
            
            `;
            }
            
            commentBody += `
            ---
            <sub>🤖 Automated PR analysis • Updated: ${timestamp} UTC • [View workflow run](${runUrl})</sub>`;
            
            // Try to find existing comment to update
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🤖 Automated PR analysis')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log('✅ Updated existing PR comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('✅ Created new PR comment');
            }
